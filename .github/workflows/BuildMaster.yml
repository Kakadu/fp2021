name: Build master

on:
  push:
    branches:
      - 'master'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-compiler:
          #- 4.10.x
          #- ocaml-variants.4.11.2+flambda
          - ocaml-variants.4.12.0+options,ocaml-option-flambda
        opam-disable-sandboxing:
          - true
        dune-cache:
          - true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}

      # checking out the code seems to be important because local switch is used
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0                      # fix me later

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2.0.0-beta3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true

      ########## Installing a linter
      #- uses: actions/checkout@v2
      #  with:
      #    repository: Kakadu/mylinter
      #    path: mylinter
      #- run: opam pin add ./mylinter --no-action
      #- name: Installing a linter
      #  run: opam install mylinter --yes

      ############# Detecting and compiling fp2021
      # Smart link about setting environment variables
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      - run: |
          ./detect_latest.sh >> $GITHUB_ENV
          echo "${{ env.latest }}"

      - run: |
          cd ${{ env.latest }} && opam install . --deps-only --with-test --with-doc

      - name: Naive linting
        run: |
          cd ${{ env.latest }} && ../lint_filesystem.py ${{ env.latest }}

      - name: Checking ocamlformat
        run: |
          cd ${{ env.latest }} && opam exec -- dune build @fmt --profile=release

      - run: |
          cd ${{ env.latest }} && opam exec -- dune build --profile=release

      - run: |
          cd ${{ env.latest }} && opam exec -- dune runtest --profile=release

      - name: Build API documentation
        run: |
          opam install odoc --yes
          cd ${{ env.latest }} && opam exec -- dune build @doc --profile=release

      - name: Deploy API documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.latest }}/_build/default/_doc/_html
          keep_files: true
          destination_dir: doc/${{ env.latest }}

      - uses: actions/upload-artifact@v2
        with:
          name: docs
          path: ${{ env.latest }}/_build/default/_doc/_html

      #- uses: reviewdog/action-setup@v1

      #- run: |
      #    echo "RDJSON_DIR_PATH=_build/default/_found_lints" >> $GITHUB_ENV
      #- run: cd ${{ env.latest }} && mkdir -p ${{ env.RDJSON_DIR_PATH }}
      #- run: |
      #    echo "RDJSON_FILE_PATH=${{ env.RDJSON_DIR_PATH }}/$(date +%Y-%m-%d_%H:%M).rdjsonl" >> $GITHUB_ENV

      #- name: running mylinter
      #  run: cd ${{ env.latest }} && opam exec -- mylinter -dir . -add-prefix ${{ env.latest }}/ -ordjsonl ${{ env.RDJSON_FILE_PATH }}

      #- run: cat ${{ env.latest }}/${{ env.RDJSON_FILE_PATH }}

      #- name: Run reviewdog
        #env:
        #  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  run: >
      #    cat ${{ env.latest }}/${{ env.RDJSON_FILE_PATH }} |
      #    reviewdog -f=rdjsonl -filter-mode nofilter -reporter=github-pr-check
